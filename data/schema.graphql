schema {
  query: query
  mutation: rootMutation
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""item attributes"""
type attributes {
  description: String
  volume: Int
  weight: Int
}

"""item attributes"""
scalar attributesScalar

type Category {
  id: Int
  name: String
}

"""It contains category related queries"""
type categoryQuery {
  allCategories: [Category]
  category(categoryId: String!): Category
}

input createCategoryMutationInput {
  name: String!
  clientMutationId: String
}

type createCategoryMutationPayload {
  category: Category
  clientMutationId: String
}

input createItemMutationInput {
  categoryId: Int!
  userId: String!
  name: String!
  price: Int!
  quantity: Int!
  attributes: attributesScalar
  clientMutationId: String
}

type createItemMutationPayload {
  item: [Item]!
  clientMutationId: String
}

input createUserMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type createUserMutationPayload {
  token: String
  userId: String
  clientMutationId: String
}

type Item implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  price: Int
  quantity: Int
  attributes: attributes
  categoryId: Int
  userId: Int
  categoryName: String
  userName: String
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge"""
  node: Item

  """A cursor for use in pagination"""
  cursor: String!
}

"""It contains item related queries"""
type itemQuery {
  allItems: [Item]
  item(itemId: String!): Item

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

input loginMutationInput {
  username: String!
  password: String!
  clientMutationId: String
}

type loginMutationPayload {
  token: String
  userId: ID
  clientMutationId: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type query {
  userQuery: userQuery
  itemQuery: itemQuery
  categoryQuery: categoryQuery

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

input removeItemMutationInput {
  id: String!
  clientMutationId: String
}

type removeItemMutationPayload {
  deletedId: Int
  clientMutationId: String
}

type rootMutation {
  createUserMutation(input: createUserMutationInput!): createUserMutationPayload
  createCategoryMutation(input: createCategoryMutationInput!): createCategoryMutationPayload
  createItemMutation(input: createItemMutationInput!): createItemMutationPayload
  removeItemMutation(input: removeItemMutationInput!): removeItemMutationPayload
  loginMutation(input: loginMutationInput!): loginMutationPayload
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  username: String
  password: String
  token: String
  items(after: String, first: Int, before: String, last: Int): ItemConnection
}

"""it contains user related queries"""
type userQuery {
  allPeople: [User]
  person(userId: String!): User

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

